// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum payment_status {
  pending
  completed
  failed
}

enum user_status {
  pending
  active
  inactive
  blocked
}

enum level_status {
  Silver
  Gold
  Platinum
  Diamond
}

enum order_status {
  active
  draft
  pending
  completed
  cancelled
}

enum transaction_type {
  deposit
  withdrawal
  purchase
  sale
  referral
}

enum transaction_status {
  active
  draft
  pending
  completed
  failed
}

enum referral_status {
  active
  draft
  pending
  paid
  cancelled
}


model ReferralHistory {
  id                Int      @id @default(autoincrement())
  referred_id       Int      
  order_id          Int      
  commission_amount Decimal  @db.Decimal(15, 2)
  status            referral_status @default(pending)
  created_at        DateTime @default(now()) 

  referred_user     User     @relation(fields: [referred_id], references: [id])
  order             Order    @relation(fields: [order_id], references: [id])

  @@map("referral_histories")
}

model Order {
  id     Int      @id @default(autoincrement())
  user_id      Int
  total_amount Decimal  @db.Decimal(15, 2)
  status       order_status @default(pending)
  created_at   DateTime @default(now())

  user         User     @relation(fields: [user_id], references: [id])
  referral_history  ReferralHistory[]
  orderItems  OrderItem[]

  @@map("orders")
}

model OrderItem {
  id          Int      @id @default(autoincrement())
  order_id    Int
  document_id Int
  price       Decimal  @db.Decimal(15, 2)
  status      user_status @default(pending)
  created_at  DateTime @default(now())

  order       Order    @relation(fields: [order_id], references: [id])

  document    Document @relation(fields: [document_id], references: [id])

  @@map("order_items")
}

model Transaction {
  id          Int      @id @default(autoincrement())
  user_id     Int
  amount      Decimal  @db.Decimal(15, 2)
  type      transaction_type @default(deposit)
  status      transaction_status @default(pending)
  reference_id Int?    
  description String?  
  created_at  DateTime @default(now())

  user        User     @relation(fields: [user_id], references: [id])

  @@map("transactions")
}

model Subject {
  id  Int         @id @default(autoincrement())
  name        String      @db.VarChar(255)
  description String?
  status      user_status  @default(pending)
  created_at  DateTime    @default(now())
  updated_at  DateTime    @default(now()) @updatedAt
  documents   Document[]

  @@map("subjects")
}

model University {
  id  Int         @id @default(autoincrement())
  name           String      @db.VarChar(255)
  description    String?
  status         user_status  @default(pending)
  created_at     DateTime    @default(now())
  updated_at     DateTime    @default(now()) @updatedAt
  documents      Document[]  

  @@map("universities")
}

model Category {
  id   Int                @id @default(autoincrement())
  name          String
  description   String?
  status         user_status  @default(pending)
  created_at    DateTime           @default(now())
  updated_at    DateTime           @default(now()) @updatedAt

  documentCategories DocumentCategory[] 

  @@map("categories")
}

model DocumentCategory {
  document_id Int      @map("document_id")
  category_id Int      @map("category_id")
  document    Document @relation(fields: [document_id], references: [id])
  category    Category @relation(fields: [category_id], references: [id])

  @@id([document_id, category_id]) 

  @@map("document_categories")
}

model Document {
  id             Int      @id @default(autoincrement())
  title          String   @db.VarChar(255)
  description    String? 
  price          Decimal  @db.Decimal(15, 2)
  file_path      String   @db.VarChar(255) 
  instruct_path  String?  @db.VarChar(255) 
  user_id        Int      
  subject_id     Int      
  university_id  Int     
  view_count     Int      @default(0) 
  download_count Int      @default(0) 
  status      user_status @default(pending)
  created_at     DateTime @default(now()) 
  updated_at     DateTime @default(now()) @updatedAt

  user           User     @relation(fields: [user_id], references: [id])
  subject       Subject  @relation(fields: [subject_id], references: [id])
  university    University  @relation(fields: [university_id], references: [id])
  documentCategories DocumentCategory[] 
  orderItems  OrderItem[]
  fileImages      FileImage[]

  @@map("documents")
}

model FileImage {
  id          Int         @id @default(autoincrement())
  document_id Int
  image_path  String      @db.VarChar(255)
  name        String?     @db.VarChar(255)
  status      user_status @default(pending)
  created_at  DateTime    @default(now())
  updated_at  DateTime    @default(now()) @updatedAt

  document    Document    @relation(fields: [document_id], references: [id])

  @@map("file_images")
}


model User {
  id       Int         @id @default(autoincrement())
  username      String      @unique @db.VarChar(255)
  email         String      @unique @db.VarChar(255)
  password_hash String      @db.VarChar(255)
  full_name     String?     @db.VarChar(255)
  phone         String?     @db.VarChar(255)
  balance       Decimal?    @default(0) @db.Decimal(15, 2)
  referral_code String?     @unique @db.VarChar(255)
  status        user_status @default(pending)
  level         level_status @default(Silver)
  created_at    DateTime    @default(now())
  updated_at    DateTime    @default(now()) @updatedAt
  is_deleted    Boolean     @default(false)

  orders       Order[]
  transactions Transaction[]
  referral_history  ReferralHistory[]
  documents      Document[]

  @@map("users")
}